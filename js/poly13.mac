/* Calculate optimal polynmomial for HotApplePi Box */
/* See https://github.com/alfille/HotApplePi */
/* Here curve is centered on s=0, symmetric (even function) */
/* Satisfies f*(L-f)=C*sqrt(1-f'^2), f the function, L length, C constant */
/* f'(0)=0, f(-.5)=f(.5)=0 */
/* Run on maxima: load("./poly.mac") */

/*
  Version 13
    Use trig approx
*/

kill(all);
/* Common factor */
c(i):=1;

/* Highest order term */ 
N:2;

/* Width */
w:1/2;

/* Assumptions */
assume(s>=0, L>0, C>0, f0>0, df<=0 );

/* f function */
f:sum(a[1]*cos((2*i-1)*s*%pi/(2*w)),i,1,N);
df:diff(f,s),factor;
ddf:diff(df,s),factor;

/* At midpoint */
f0:ev(f,s=0,factor);
ddf0:ev(ddf,s=0,factor);

/* At endpoint */
dfw:df,s=w,factor;

C:f0*(L-f0);

End: dfw+1,factor;

/* Choose one of these: */
/*   Avoid SQRT */
E:f^2*(L-f)^2-C^2*(1-df^2),expand,factor;

/*   Avoid squaring */
/*
E:f*(L-f)-C*sqrt(1-df^2),expand,factor;
*/

/* End of choice */

print("calc E");
AllSolutions:[];

/* Solve one level */
ThisSolve( E, i, S ) :=
  block(
    [Solution],
    print("Level",i,S),
    if 
		i > N
    then
		( AllSolutions:append(AllSolutions,[S]) , return() ),

	if 
		i=N
	then
		Solution:solve(bfloat(End),a[i])
	else
		Solution:solve( bfloat(ev(E,s=w/(2*i+1))), a[i] ),

	if
		not listp(Solution)
	then
		( print("Bad solution",Solution,"from",E) , return() ),

	/* Only real solutions */
	print("Number of solutions",length(Solution)),
	if 
		(length(Solution)>0)
	then
		map( 
		lambda( [sol], ThisSolve( bfloat(ev(E,sol,factor)), i+1, append(S,[sol]) ) ),
		Solution
		)
  );  

ThisSolve( E, 1, [] );

print("length of all solutions",length(AllSolutions));
display(AllSolutions);

/*
LL:[0.01,0.02,0.05,0.1,0.2,0.5,0.7,0.8,0.9,1,1.1,1.2,1.5,2,5,10,20,50];
*/
LL:[0.01,0.1,2,20];

for sol in AllSolutions do
	body (
		[F:ev(f,sol,u=(1/2)^2-s^2,factor)],
		plot2d(makelist(ev(F,L=LL[i]),i,1,length(LL)),[s,0,.5],[y,0,.4],cons(legend,map(string,LL))),
		break(sol)
	);

/*
display(F);
*/    
