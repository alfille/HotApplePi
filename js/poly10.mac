/* Calculate optimal polynmomial for HotApplePi Box */
/* See https://github.com/alfille/HotApplePi */
/* Here curve is centered on s=0, symmetric (even function) */
/* Satisfies f*(L-f)=C*sqrt(1-f'^2), f the function, L length, C constant */
/* f'(0)=0, f(-.5)=f(.5)=0 */
/* Run on maxima: load("./poly.mac") */

/*
  Version 9
  Add factor f(s)=(w^2-s^2)g(s)
*/

kill(all);
/* Common factor */
/*
c(i):=1/(alpha^(i-1)*L^(i-1)*w^(2*i)*(1-alpha)^(i-1)*i!);
*/
c(i):=1;

/* Highest order term */ 
N:4;

/* Assumptions */
assume(w>0,s>=0, L>0, C>0, f0>0, df<=0 );

/* f function */
f:sum(a[i]*c(i)*(w^2-s^2)^i,i,1,N);
df:diff(f,s),factor;
ddf:diff(df,s),factor;

/* At midpoint */
f0:ev(f,s=0,factor);
ddf0:ev(ddf,s=0,factor);

/* At endpoint */
dfw:df,s=w,factor;

C:f0*(L-f0);

E:f^2*(L-f)^2-C^2*(1-df^2);
print("calc E");

T:taylor(E,s,0,2*N);
print("calc T");

for i:1 thru N do
  block (
    [COEFF,Solution],
    display(i),
    COEFF: coeff( T, s, 2*i-2 ),
    if 
      i=1
    then /* endpoint slope = -1 */
      Solution:solve(dfw+1,a[i])
    else /* coefficient = 0 */
      Solution:solve( COEFF, a[i] ),
    /* Only real solutions */
    Solution:sublist(Solution,lambda( [x],is(imagpart(rhs(x)=0)))),
    print("# solutions",length(Solution)),
    for j:1 thru length(Solution) do
      print(Solution[j]),
    S[i]:ev(Solution[1],factor)
  ) ;

print("Backsolve");
for i: 1 thru N do
  for j: i+1 thru N do
	S[j]:ev(S[j],S[i],factor) ;

for i:1 thru N do
  factor(display(S[i]));

F:ev(f,w=1/2);

LL:[0.01,0.02,0.05,0.1,0.2,0.5,0.7,0.8,0.9,1,1.1,1.2,1.5,2,5,10,20,50];

plot2d(makelist(ev(F,L=LL[i]),i,1,length(LL)),[s,0,.5],[y,0,.4],cons(legend,map(string,LL)));

/*
display(F);
*/    
