/* Calculate optimal polynmomial for HotApplePi Box */
/* See https://github.com/alfille/HotApplePi */
/* Here curve is centered on s=0, symmetric (even function) */
/* Satisfies f*(L-f)=C*sqrt(1-f'^2), f the function, L length, C constant */
/* f'(0)=0, f(-.5)=f(.5)=0 */
/* Run on maxima: load("./poly.mac") */

/*
  Version 11
  Add factor f(s)=(w^2-s^2)g(s)
  change of variable: u= w^2-s^2
  d/ds=-2*sqrt(w^2-u)*d/du
  f'=-2*sqrt(w^2-u)*df/du

	s=0 -> u=w^2 -> f=? -> f'=0
	s=w -> u=0 -> f=0 -> f'=-1

*/

kill(all);
/* Common factor */
/*
c(i):=1/(alpha^(i-1)*L^(i-1)*w^(2*i)*(1-alpha)^(i-1)*i!);
*/
c(i):=1;

/* Highest order term */ 
N:6;

/* Assumptions */
assume(s>=0, u<=0, L>0, C>0, f0>0, df<=0 );

/* f function */
f:1/(2*w)*u+sum(a[i]*c(i)*u^i,i,2,N),w=1/2;
df:-2*sqrt(w^2-u)*diff(f,u),w=1/2,factor;
ddf:-2*sqrt(w^2-u)*diff(df,u),w=1/2,factor;

/* At midpoint */
f0:ev(f,u=(1/2)^2,factor);
ddf0:ev(ddf,u=(1/2)^2,factor);

/* At endpoint */
dfw:df,u=0,factor;

C:f0*(L-f0);

/* Choose one of these: */
/*   Avoid SQRT */
/*
E:f^2*(L-f)^2-C^2*(1-df^2),expand;
*/
/*   Avoid squaring */
/*
E:f*(L-f)-C*taylor(sqrt(1-df^2),u,0,N),expand;
*/
E:taylor(f^2*(L-f)^2-C^2*(1-df^2),u,0,N),expand;
/* End of choice */

print("calc E");
AllSolutions:[];

/* Solve one level */
ThisSolve( E, i, S ) :=
  block(
    [COEFF, Solution],
    if 
		i > N
    then
		( AllSolutions:append(AllSolutions,[S]) , return() ),

	display(i,S),
	COEFF: ratcoeff( E, u, i ),
	Solution:solve( COEFF, a[i+1] ),
	if
		not listp(Solution)
	then
		block( print("Bad solution",Solution,"from",COEFF) , return() ),

	/* Only real solutions */
	Solution:sublist(Solution,lambda( [x],is(imagpart(rhs(x)=0)))),
	if 
		(length(Solution)>0) and (lhs(Solution[1]) # rhs(Solution[1]))
	then
		map( 
		lambda( [sol], ThisSolve( ev(E,sol,expand,factor), i+1, append(S,[sol]) ) ),
		Solution
		)
  );  

ThisSolve( E, 1, [] );

print("length of solutions",length(AllSolutions));
display(AllSolutions);

/*
LL:[0.01,0.02,0.05,0.1,0.2,0.5,0.7,0.8,0.9,1,1.1,1.2,1.5,2,5,10,20,50];
*/
LL:[0.01,0.1,2,20];

for sol in AllSolutions do
	body (
		[F:ev(f,sol,u=(1/2)^2-s^2,factor)],
		plot2d(makelist(ev(F,L=LL[i]),i,1,length(LL)),[s,0,.5],[y,0,.4],cons(legend,map(string,LL))),
		break(sol)
	);

/*
display(F);
*/    
